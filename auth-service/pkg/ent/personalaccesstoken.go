// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/neokofg/go-pet-detailed-microservices/auth-service/pkg/ent/personalaccesstoken"
)

// PersonalAccessToken is the model entity for the PersonalAccessToken schema.
type PersonalAccessToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TokenHash holds the value of the "token_hash" field.
	TokenHash string `json:"token_hash,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Abilities holds the value of the "abilities" field.
	Abilities []string `json:"abilities,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed time.Time `json:"last_used,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID       uuid.UUID `json:"user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalAccessToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalaccesstoken.FieldAbilities:
			values[i] = new([]byte)
		case personalaccesstoken.FieldID:
			values[i] = new(sql.NullInt64)
		case personalaccesstoken.FieldTokenHash, personalaccesstoken.FieldName:
			values[i] = new(sql.NullString)
		case personalaccesstoken.FieldLastUsed, personalaccesstoken.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case personalaccesstoken.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalAccessToken fields.
func (pat *PersonalAccessToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalaccesstoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pat.ID = int(value.Int64)
		case personalaccesstoken.FieldTokenHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_hash", values[i])
			} else if value.Valid {
				pat.TokenHash = value.String
			}
		case personalaccesstoken.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pat.Name = value.String
			}
		case personalaccesstoken.FieldAbilities:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field abilities", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pat.Abilities); err != nil {
					return fmt.Errorf("unmarshal field abilities: %w", err)
				}
			}
		case personalaccesstoken.FieldLastUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				pat.LastUsed = value.Time
			}
		case personalaccesstoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				pat.ExpiresAt = value.Time
			}
		case personalaccesstoken.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pat.UserID = *value
			}
		default:
			pat.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalAccessToken.
// This includes values selected through modifiers, order, etc.
func (pat *PersonalAccessToken) Value(name string) (ent.Value, error) {
	return pat.selectValues.Get(name)
}

// Update returns a builder for updating this PersonalAccessToken.
// Note that you need to call PersonalAccessToken.Unwrap() before calling this method if this PersonalAccessToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (pat *PersonalAccessToken) Update() *PersonalAccessTokenUpdateOne {
	return NewPersonalAccessTokenClient(pat.config).UpdateOne(pat)
}

// Unwrap unwraps the PersonalAccessToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pat *PersonalAccessToken) Unwrap() *PersonalAccessToken {
	_tx, ok := pat.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonalAccessToken is not a transactional entity")
	}
	pat.config.driver = _tx.drv
	return pat
}

// String implements the fmt.Stringer.
func (pat *PersonalAccessToken) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalAccessToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pat.ID))
	builder.WriteString("token_hash=")
	builder.WriteString(pat.TokenHash)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pat.Name)
	builder.WriteString(", ")
	builder.WriteString("abilities=")
	builder.WriteString(fmt.Sprintf("%v", pat.Abilities))
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(pat.LastUsed.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(pat.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pat.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// PersonalAccessTokens is a parsable slice of PersonalAccessToken.
type PersonalAccessTokens []*PersonalAccessToken
