// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/neokofg/go-pet-detailed-microservices/auth-service/pkg/ent/personalaccesstoken"
)

// PersonalAccessTokenCreate is the builder for creating a PersonalAccessToken entity.
type PersonalAccessTokenCreate struct {
	config
	mutation *PersonalAccessTokenMutation
	hooks    []Hook
}

// SetTokenHash sets the "token_hash" field.
func (patc *PersonalAccessTokenCreate) SetTokenHash(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetTokenHash(s)
	return patc
}

// SetName sets the "name" field.
func (patc *PersonalAccessTokenCreate) SetName(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetName(s)
	return patc
}

// SetAbilities sets the "abilities" field.
func (patc *PersonalAccessTokenCreate) SetAbilities(s []string) *PersonalAccessTokenCreate {
	patc.mutation.SetAbilities(s)
	return patc
}

// SetLastUsed sets the "last_used" field.
func (patc *PersonalAccessTokenCreate) SetLastUsed(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetLastUsed(t)
	return patc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableLastUsed(t *time.Time) *PersonalAccessTokenCreate {
	if t != nil {
		patc.SetLastUsed(*t)
	}
	return patc
}

// SetExpiresAt sets the "expires_at" field.
func (patc *PersonalAccessTokenCreate) SetExpiresAt(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetExpiresAt(t)
	return patc
}

// SetUserID sets the "user_id" field.
func (patc *PersonalAccessTokenCreate) SetUserID(u uuid.UUID) *PersonalAccessTokenCreate {
	patc.mutation.SetUserID(u)
	return patc
}

// Mutation returns the PersonalAccessTokenMutation object of the builder.
func (patc *PersonalAccessTokenCreate) Mutation() *PersonalAccessTokenMutation {
	return patc.mutation
}

// Save creates the PersonalAccessToken in the database.
func (patc *PersonalAccessTokenCreate) Save(ctx context.Context) (*PersonalAccessToken, error) {
	return withHooks(ctx, patc.sqlSave, patc.mutation, patc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (patc *PersonalAccessTokenCreate) SaveX(ctx context.Context) *PersonalAccessToken {
	v, err := patc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (patc *PersonalAccessTokenCreate) Exec(ctx context.Context) error {
	_, err := patc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patc *PersonalAccessTokenCreate) ExecX(ctx context.Context) {
	if err := patc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (patc *PersonalAccessTokenCreate) check() error {
	if _, ok := patc.mutation.TokenHash(); !ok {
		return &ValidationError{Name: "token_hash", err: errors.New(`ent: missing required field "PersonalAccessToken.token_hash"`)}
	}
	if _, ok := patc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PersonalAccessToken.name"`)}
	}
	if _, ok := patc.mutation.Abilities(); !ok {
		return &ValidationError{Name: "abilities", err: errors.New(`ent: missing required field "PersonalAccessToken.abilities"`)}
	}
	if _, ok := patc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "PersonalAccessToken.expires_at"`)}
	}
	if _, ok := patc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PersonalAccessToken.user_id"`)}
	}
	return nil
}

func (patc *PersonalAccessTokenCreate) sqlSave(ctx context.Context) (*PersonalAccessToken, error) {
	if err := patc.check(); err != nil {
		return nil, err
	}
	_node, _spec := patc.createSpec()
	if err := sqlgraph.CreateNode(ctx, patc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	patc.mutation.id = &_node.ID
	patc.mutation.done = true
	return _node, nil
}

func (patc *PersonalAccessTokenCreate) createSpec() (*PersonalAccessToken, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalAccessToken{config: patc.config}
		_spec = sqlgraph.NewCreateSpec(personalaccesstoken.Table, sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeInt))
	)
	if value, ok := patc.mutation.TokenHash(); ok {
		_spec.SetField(personalaccesstoken.FieldTokenHash, field.TypeString, value)
		_node.TokenHash = value
	}
	if value, ok := patc.mutation.Name(); ok {
		_spec.SetField(personalaccesstoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := patc.mutation.Abilities(); ok {
		_spec.SetField(personalaccesstoken.FieldAbilities, field.TypeJSON, value)
		_node.Abilities = value
	}
	if value, ok := patc.mutation.LastUsed(); ok {
		_spec.SetField(personalaccesstoken.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = value
	}
	if value, ok := patc.mutation.ExpiresAt(); ok {
		_spec.SetField(personalaccesstoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := patc.mutation.UserID(); ok {
		_spec.SetField(personalaccesstoken.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	return _node, _spec
}

// PersonalAccessTokenCreateBulk is the builder for creating many PersonalAccessToken entities in bulk.
type PersonalAccessTokenCreateBulk struct {
	config
	err      error
	builders []*PersonalAccessTokenCreate
}

// Save creates the PersonalAccessToken entities in the database.
func (patcb *PersonalAccessTokenCreateBulk) Save(ctx context.Context) ([]*PersonalAccessToken, error) {
	if patcb.err != nil {
		return nil, patcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(patcb.builders))
	nodes := make([]*PersonalAccessToken, len(patcb.builders))
	mutators := make([]Mutator, len(patcb.builders))
	for i := range patcb.builders {
		func(i int, root context.Context) {
			builder := patcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalAccessTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, patcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, patcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, patcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (patcb *PersonalAccessTokenCreateBulk) SaveX(ctx context.Context) []*PersonalAccessToken {
	v, err := patcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (patcb *PersonalAccessTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := patcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patcb *PersonalAccessTokenCreateBulk) ExecX(ctx context.Context) {
	if err := patcb.Exec(ctx); err != nil {
		panic(err)
	}
}
