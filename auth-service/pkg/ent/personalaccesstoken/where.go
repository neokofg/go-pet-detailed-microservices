// Code generated by ent, DO NOT EDIT.

package personalaccesstoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/neokofg/go-pet-detailed-microservices/auth-service/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLTE(FieldID, id))
}

// TokenHash applies equality check predicate on the "token_hash" field. It's identical to TokenHashEQ.
func TokenHash(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldTokenHash, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldName, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldLastUsed, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldExpiresAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldUserID, v))
}

// TokenHashEQ applies the EQ predicate on the "token_hash" field.
func TokenHashEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldTokenHash, v))
}

// TokenHashNEQ applies the NEQ predicate on the "token_hash" field.
func TokenHashNEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNEQ(FieldTokenHash, v))
}

// TokenHashIn applies the In predicate on the "token_hash" field.
func TokenHashIn(vs ...string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldIn(FieldTokenHash, vs...))
}

// TokenHashNotIn applies the NotIn predicate on the "token_hash" field.
func TokenHashNotIn(vs ...string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNotIn(FieldTokenHash, vs...))
}

// TokenHashGT applies the GT predicate on the "token_hash" field.
func TokenHashGT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGT(FieldTokenHash, v))
}

// TokenHashGTE applies the GTE predicate on the "token_hash" field.
func TokenHashGTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGTE(FieldTokenHash, v))
}

// TokenHashLT applies the LT predicate on the "token_hash" field.
func TokenHashLT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLT(FieldTokenHash, v))
}

// TokenHashLTE applies the LTE predicate on the "token_hash" field.
func TokenHashLTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLTE(FieldTokenHash, v))
}

// TokenHashContains applies the Contains predicate on the "token_hash" field.
func TokenHashContains(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldContains(FieldTokenHash, v))
}

// TokenHashHasPrefix applies the HasPrefix predicate on the "token_hash" field.
func TokenHashHasPrefix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldHasPrefix(FieldTokenHash, v))
}

// TokenHashHasSuffix applies the HasSuffix predicate on the "token_hash" field.
func TokenHashHasSuffix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldHasSuffix(FieldTokenHash, v))
}

// TokenHashEqualFold applies the EqualFold predicate on the "token_hash" field.
func TokenHashEqualFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEqualFold(FieldTokenHash, v))
}

// TokenHashContainsFold applies the ContainsFold predicate on the "token_hash" field.
func TokenHashContainsFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldContainsFold(FieldTokenHash, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldContainsFold(FieldName, v))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNotNull(FieldLastUsed))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLTE(FieldExpiresAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.FieldLTE(FieldUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PersonalAccessToken) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PersonalAccessToken) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PersonalAccessToken) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(sql.NotPredicates(p))
}
