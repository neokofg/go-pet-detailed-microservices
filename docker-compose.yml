services:
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - AUTH_SERVICE_ADDR=auth-service:9091
      - USER_SERVICE_ADDR=user-service:9094
      - NEWS_SERVICE_ADDR=news-service:9093
      - REDIS_URL=redis:6379
      - GIN_MODE=release
    depends_on:
      - auth-service
    networks:
      - backend

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports:
      - "9091:9091"  # gRPC
      - "8081:8081"  # HTTP (админка)
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-auth:5432/auth?sslmode=disable
      - GRPC_PORT=9091
      - HTTP_PORT=8081
      - KAFKA_ADDR=kafka:9092
      - GIN_MODE=release
    depends_on:
      - kafka
      - postgres-auth
    networks:
      - backend

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "9094:9094"  # gRPC
      - "8082:8082"  # HTTP (админка)
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-user:5432/user?sslmode=disable
      - GRPC_PORT=9094
      - HTTP_PORT=8082
      - AUTH_SERVICE_ADDR=auth-service:9091
      - KAFKA_ADDR=kafka:9092
      - GIN_MODE=release
    depends_on:
      - kafka
      - postgres-user
    networks:
      - backend

  news-service:
    build:
      context: .
      dockerfile: news-service/Dockerfile
    ports:
      - "9093:9093"  # gRPC
      - "8083:8083"  # HTTP (админка)
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-news:5432/news?sslmode=disable
      - GRPC_PORT=9093
      - HTTP_PORT=8083
      - USER_SERVICE_ADDR=user-service:9094
      - KAFKA_ADDR=kafka:9092
      - GIN_MODE=release
    depends_on:
      - kafka
      - postgres-news
    networks:
      - backend

  postgres-auth:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    networks:
      - backend

  postgres-user:
    image: postgres:17-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - backend

  postgres-news:
    image: postgres:17-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=news
    volumes:
      - postgres-news-data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - backend

  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8090:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0
    networks:
      - backend
    depends_on:
      - redis

  postgres-auth-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres-auth:5432/auth?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres-auth
    networks:
      - backend

  postgres-user-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres-user:5432/user?sslmode=disable
    ports:
      - "9188:9187"
    depends_on:
      - postgres-user
    networks:
      - backend

  postgres-news-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres-news:5432/news?sslmode=disable
    ports:
      - "9189:9187"
    depends_on:
      - postgres-news
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - backend

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user.deleted.auth --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user.deleted.news --partitions 1 --replication-factor 1
      echo -e 'Successfully created topics'
      "
    networks:
      - backend

volumes:
  postgres-auth-data:
  postgres-user-data:
  postgres-news-data:
  grafana-storage:
  redis_data:

networks:
  backend:
    driver: bridge