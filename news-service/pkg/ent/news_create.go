// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/neokofg/go-pet-detailed-microservices/news-service/pkg/ent/news"
)

// NewsCreate is the builder for creating a News entity.
type NewsCreate struct {
	config
	mutation *NewsMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (nc *NewsCreate) SetTitle(s string) *NewsCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetContent sets the "content" field.
func (nc *NewsCreate) SetContent(s string) *NewsCreate {
	nc.mutation.SetContent(s)
	return nc
}

// SetImageURL sets the "image_url" field.
func (nc *NewsCreate) SetImageURL(s string) *NewsCreate {
	nc.mutation.SetImageURL(s)
	return nc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (nc *NewsCreate) SetNillableImageURL(s *string) *NewsCreate {
	if s != nil {
		nc.SetImageURL(*s)
	}
	return nc
}

// SetUserID sets the "user_id" field.
func (nc *NewsCreate) SetUserID(u uuid.UUID) *NewsCreate {
	nc.mutation.SetUserID(u)
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NewsCreate) SetCreatedAt(t time.Time) *NewsCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NewsCreate) SetNillableCreatedAt(t *time.Time) *NewsCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NewsCreate) SetUpdatedAt(t time.Time) *NewsCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NewsCreate) SetNillableUpdatedAt(t *time.Time) *NewsCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NewsCreate) SetID(u uuid.UUID) *NewsCreate {
	nc.mutation.SetID(u)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NewsCreate) SetNillableID(u *uuid.UUID) *NewsCreate {
	if u != nil {
		nc.SetID(*u)
	}
	return nc
}

// Mutation returns the NewsMutation object of the builder.
func (nc *NewsCreate) Mutation() *NewsMutation {
	return nc.mutation
}

// Save creates the News in the database.
func (nc *NewsCreate) Save(ctx context.Context) (*News, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NewsCreate) SaveX(ctx context.Context) *News {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NewsCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NewsCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NewsCreate) defaults() {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := news.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := news.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		v := news.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NewsCreate) check() error {
	if _, ok := nc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "News.title"`)}
	}
	if v, ok := nc.mutation.Title(); ok {
		if err := news.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "News.title": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "News.content"`)}
	}
	if v, ok := nc.mutation.Content(); ok {
		if err := news.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "News.content": %w`, err)}
		}
	}
	if v, ok := nc.mutation.ImageURL(); ok {
		if err := news.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "News.image_url": %w`, err)}
		}
	}
	if _, ok := nc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "News.user_id"`)}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "News.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "News.updated_at"`)}
	}
	return nil
}

func (nc *NewsCreate) sqlSave(ctx context.Context) (*News, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NewsCreate) createSpec() (*News, *sqlgraph.CreateSpec) {
	var (
		_node = &News{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(news.Table, sqlgraph.NewFieldSpec(news.FieldID, field.TypeUUID))
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := nc.mutation.Title(); ok {
		_spec.SetField(news.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := nc.mutation.Content(); ok {
		_spec.SetField(news.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := nc.mutation.ImageURL(); ok {
		_spec.SetField(news.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := nc.mutation.UserID(); ok {
		_spec.SetField(news.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(news.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(news.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// NewsCreateBulk is the builder for creating many News entities in bulk.
type NewsCreateBulk struct {
	config
	err      error
	builders []*NewsCreate
}

// Save creates the News entities in the database.
func (ncb *NewsCreateBulk) Save(ctx context.Context) ([]*News, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*News, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NewsCreateBulk) SaveX(ctx context.Context) []*News {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NewsCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NewsCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
